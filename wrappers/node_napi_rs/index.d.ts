/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export function generatePublicInvitation(publicDid: string, label: string): string
export function getAgentDid(handle: number): string
export function getAgentVerkey(handle: number): string
export function getPwDid(handle: number): string
export function getPwVerkey(handle: number): string
export function getTheirPwDid(handle: number): string
export function getTheirPwVerkey(handle: number): string
export function getThreadId(handle: number): string
export function getState(handle: number): number
export function getSourceId(handle: number): string
export function createConnection(sourceId: string): Promise<number>
export function createConnectionWithInvite(sourceId: string, details: string): Promise<number>
export function createWithRequest(request: string, agentHandle: number): Promise<number>
export function createWithRequestV2(request: string, pwInfo: string): Promise<number>
export function sendGenericMessage(handle: number, msg: string): Promise<void>
export function sendHandshakeReuse(handle: number, oobMsg: string): Promise<void>
export function updateStateWithMessage(handle: number, message: string): Promise<number>
export function handleMessage(handle: number, message: string): Promise<number>
export function updateState(handle: number): Promise<number>
export function deleteConnection(handle: number): Promise<number>
export function connect(handle: number): Promise<string | null>
export function toString(handle: number): string
export function fromString(connectionData: string): number
export function release(handle: number): void
export function releaseAll(): void
export function getInviteDetails(handle: number): string
export function updateMessageStatus(handle: number, uid: string): Promise<void>
export function sendPing(handle: number, comment?: string | undefined | null): Promise<void>
export function sendDiscoveryFeatures(handle: number, query?: string | undefined | null, comment?: string | undefined | null): Promise<void>
export function getConnectionInfo(handle: number): Promise<string>
export function parseConnectionHandles(connHandles: Array<string>): Array<number>
export function downloadMessages(connHandles: Array<number>, statusCodes?: string | undefined | null, uids?: string | undefined | null): Promise<string>
export function signData(handle: number, data: Buffer): Promise<Buffer>
export function verifySignature(handle: number, data: Buffer, signature: Buffer): Promise<boolean>
export function createOutOfBand(config: string): number
export function createOutOfBandMsgFromMsg(msg: string): number
export function appendMessage(handle: number, msg: string): void
export function appendService(handle: number, service: string): void
export function appendServiceDid(handle: number, did: string): void
export function extractA2AMessage(handle: number): string
export function toA2AMessage(handle: number): string
export function connectionExists(handle: number, connHandles: Array<number>): Promise<number>
export function buildConnection(handle: number): Promise<string>
export function getThreadIdSender(handle: number): string
export function getThreadIdReceiver(handle: number): string
export function toStringSender(handle: number): string
export function toStringReceiver(handle: number): string
export function fromStringSender(oobData: string): number
export function fromStringReceiver(oobData: string): number
export function releaseSender(handle: number): void
export function releaseReceiver(handle: number): void
export function initDefaultLogger(pattern?: string | undefined | null): void
export function createAgencyClientForMainWallet(config: string): void
export function openAsMainWallet(walletConfig: string): Promise<number>
export function closeMainWallet(): Promise<void>
export function createMainWallet(walletConfig: string): Promise<void>
export function enableMocks(): void
